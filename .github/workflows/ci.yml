name: Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/development.txt
        
    - name: Code formatting check (Black)
      run: black --check --diff src/ tests/
      
    - name: Import sorting check (isort)
      run: isort --check-only --diff src/ tests/
      
    - name: Linting (flake8)
      run: flake8 src/ tests/ --count --statistics
      
    - name: Type checking (mypy)
      run: mypy src/
      
    - name: Security check (bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_aristotelian_ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        
    - name: Download spaCy models
      run: |
        python -m spacy download en_core_web_sm
        python -m spacy download es_core_news_sm
        python -m spacy download fr_core_news_sm
        python -m spacy download de_core_news_sm
        python -m spacy download it_core_news_sm
        
    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_aristotelian_ai
        REDIS_URL: redis://localhost:6379
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        PYTHONPATH: .
      run: |
        python -m pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Philosophical Accuracy Tests
  philosophical-tests:
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_aristotelian_ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        
    - name: Run philosophical accuracy tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_aristotelian_ai
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        PYTHONPATH: .
      run: |
        python -m pytest tests/evaluation/test_philosophical_accuracy.py -v --tb=short
        
    - name: Run cross-lingual consistency tests
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_aristotelian_ai
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        PYTHONPATH: .
      run: |
        python -m pytest tests/evaluation/test_cross_lingual_consistency.py -v --tb=short
        
    - name: Upload philosophical test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: philosophical-test-results
        path: test-results/

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_aristotelian_ai
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        
    - name: Start application
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_aristotelian_ai
        REDIS_URL: redis://localhost:6379
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        PYTHONPATH: .
      run: |
        python -m src.api.main &
        sleep 10  # Wait for app to start
        
    - name: Run integration tests
      env:
        TEST_API_BASE_URL: http://localhost:8000
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_aristotelian_ai
        REDIS_URL: redis://localhost:6379
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        PYTHONPATH: .
      run: |
        python -m pytest tests/integration/ -v --tb=short
        
    - name: Run API tests
      run: |
        # Test basic API endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/metrics || exit 1

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/testing.txt
        pip install locust
        
    - name: Run performance tests
      env:
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
      run: |
        # Run load tests
        python tests/performance/load_test.py
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run safety check for Python dependencies
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: Upload safety report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  # Docker Build Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./deployment/docker/Dockerfile
        push: false
        tags: aristotelian-ai:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm aristotelian-ai:test python -c "import src; print('Import successful')"